// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_reports.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserReport = `-- name: CreateUserReport :one
INSERT INTO user_reports (
    user_id,
    report_type,
    total_value
) VALUES (
    $1,
    $2,
    $3
) RETURNING u_report_id, user_id, report_type, total_value, created_at
`

type CreateUserReportParams struct {
	UserID     uuid.UUID      `json:"user_id"`
	ReportType string         `json:"report_type"`
	TotalValue pgtype.Numeric `json:"total_value"`
}

func (q *Queries) CreateUserReport(ctx context.Context, arg CreateUserReportParams) (UserReport, error) {
	row := q.db.QueryRow(ctx, createUserReport, arg.UserID, arg.ReportType, arg.TotalValue)
	var i UserReport
	err := row.Scan(
		&i.UReportID,
		&i.UserID,
		&i.ReportType,
		&i.TotalValue,
		&i.CreatedAt,
	)
	return i, err
}

const getUserReportById = `-- name: GetUserReportById :one
SELECT 
    u_report_id, user_id, report_type, total_value, created_at 
FROM 
    user_reports 
WHERE u_report_id = $1
`

func (q *Queries) GetUserReportById(ctx context.Context, uReportID uuid.UUID) (UserReport, error) {
	row := q.db.QueryRow(ctx, getUserReportById, uReportID)
	var i UserReport
	err := row.Scan(
		&i.UReportID,
		&i.UserID,
		&i.ReportType,
		&i.TotalValue,
		&i.CreatedAt,
	)
	return i, err
}

const getUserReportByTotalValue = `-- name: GetUserReportByTotalValue :many
SELECT 
    u_report_id, user_id, report_type, total_value, created_at 
FROM 
    user_reports 
WHERE 
    total_value >= $1
`

func (q *Queries) GetUserReportByTotalValue(ctx context.Context, totalValue pgtype.Numeric) ([]UserReport, error) {
	rows, err := q.db.Query(ctx, getUserReportByTotalValue, totalValue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserReport{}
	for rows.Next() {
		var i UserReport
		if err := rows.Scan(
			&i.UReportID,
			&i.UserID,
			&i.ReportType,
			&i.TotalValue,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReportByUserId = `-- name: GetUserReportByUserId :many
SELECT 
    u_report_id, user_id, report_type, total_value, created_at 
FROM 
    user_reports 
WHERE 
    user_id = $1
`

func (q *Queries) GetUserReportByUserId(ctx context.Context, userID uuid.UUID) ([]UserReport, error) {
	rows, err := q.db.Query(ctx, getUserReportByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserReport{}
	for rows.Next() {
		var i UserReport
		if err := rows.Scan(
			&i.UReportID,
			&i.UserID,
			&i.ReportType,
			&i.TotalValue,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
