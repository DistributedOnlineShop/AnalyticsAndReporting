// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sales_reports.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSalesReports = `-- name: CreateSalesReports :one
INSERT INTO sales_reports (
    report_type,
    start_date,
    end_date,
    total_sales,
    total_orders
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING s_report_id, report_type, start_date, end_date, total_sales, total_orders, created_at
`

type CreateSalesReportsParams struct {
	ReportType  string           `json:"report_type"`
	StartDate   pgtype.Timestamp `json:"start_date"`
	EndDate     pgtype.Timestamp `json:"end_date"`
	TotalSales  pgtype.Numeric   `json:"total_sales"`
	TotalOrders pgtype.Int4      `json:"total_orders"`
}

func (q *Queries) CreateSalesReports(ctx context.Context, arg CreateSalesReportsParams) (SalesReport, error) {
	row := q.db.QueryRow(ctx, createSalesReports,
		arg.ReportType,
		arg.StartDate,
		arg.EndDate,
		arg.TotalSales,
		arg.TotalOrders,
	)
	var i SalesReport
	err := row.Scan(
		&i.SReportID,
		&i.ReportType,
		&i.StartDate,
		&i.EndDate,
		&i.TotalSales,
		&i.TotalOrders,
		&i.CreatedAt,
	)
	return i, err
}

const getSalesReportsByDate = `-- name: GetSalesReportsByDate :many
SELECT 
    s_report_id, report_type, start_date, end_date, total_sales, total_orders, created_at 
FROM 
    sales_reports
WHERE 
    start_date <= $1 AND end_date >= $1
`

func (q *Queries) GetSalesReportsByDate(ctx context.Context, startDate pgtype.Timestamp) ([]SalesReport, error) {
	rows, err := q.db.Query(ctx, getSalesReportsByDate, startDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SalesReport{}
	for rows.Next() {
		var i SalesReport
		if err := rows.Scan(
			&i.SReportID,
			&i.ReportType,
			&i.StartDate,
			&i.EndDate,
			&i.TotalSales,
			&i.TotalOrders,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalesReportsById = `-- name: GetSalesReportsById :one
SELECT 
    s_report_id, report_type, start_date, end_date, total_sales, total_orders, created_at 
FROM 
    sales_reports
WHERE 
   s_report_id = $1
`

func (q *Queries) GetSalesReportsById(ctx context.Context, sReportID uuid.UUID) (SalesReport, error) {
	row := q.db.QueryRow(ctx, getSalesReportsById, sReportID)
	var i SalesReport
	err := row.Scan(
		&i.SReportID,
		&i.ReportType,
		&i.StartDate,
		&i.EndDate,
		&i.TotalSales,
		&i.TotalOrders,
		&i.CreatedAt,
	)
	return i, err
}

const getSalesReportsList = `-- name: GetSalesReportsList :many
SELECT 
    s_report_id, report_type, start_date, end_date, total_sales, total_orders, created_at 
FROM 
    sales_reports
ORDER BY 
    created_at DESC
`

func (q *Queries) GetSalesReportsList(ctx context.Context) ([]SalesReport, error) {
	rows, err := q.db.Query(ctx, getSalesReportsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SalesReport{}
	for rows.Next() {
		var i SalesReport
		if err := rows.Scan(
			&i.SReportID,
			&i.ReportType,
			&i.StartDate,
			&i.EndDate,
			&i.TotalSales,
			&i.TotalOrders,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
